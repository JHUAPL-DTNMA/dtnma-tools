@@ -107,7 +107,7 @@
 void ui_print_nop();
 void *ui_thread(int *running);
 
-#ifdef HAVE_MYSQL
+#if defined(HAVE_MYSQL) || defined(HAVE_POSTGRESQL)
 int ui_menu_sql_do(uint8_t choice);
 void ui_menu_sql_show();
 
@@ -168,7 +168,7 @@
    char* data; /**< User data field */
 } ui_menu_list_t;
 
-/** UI Menu Options 
+/** UI Menu Options
  *   Unless otherwise indicated, these options have no effect in no-curses mode.
  */
 #define UI_OPT_AUTO_LABEL        0x1
@@ -191,7 +191,7 @@
    UI_CB_RTV_CONTINUE = 0, /**< Continue displaying menu */
    UI_CB_RTV_STATUS = 1,  /**< Continue displaying menu with updated status message (if ui_menu_listing was given a status_msg buffer) */
    UI_CB_RTV_CHOICE = 2, /** Abort menu with current selection index as return value */
-   
+
 } ui_cb_return_values_t;
 
 typedef struct ui_print_cfg_t
@@ -211,10 +211,10 @@
 
 /** Callback function prototype for ui_menu_listing
  * @param[in] idx Index into the menu listing configuration for the currently selected item.
- * @param[in] keypress The key that the user pressed to make the current selection. 
+ * @param[in] keypress The key that the user pressed to make the current selection.
  *    For NCURSES mode, this is any keypress that does not cause the menu to navigate or cancel.
  *    This is not applicable in stdio/fallback mode, where 0 will always be given here.
- * @param[in,out] data The optional user data field associated with the list menu definition.  
+ * @param[in,out] data The optional user data field associated with the list menu definition.
  * @param[in,out] status_msg A copy of the status_msg buffer given to ui_menu_listing. If not NULL,
  *    callback may update the contents of this message and return 2 to indicate menu should
  *    refresh status message and continue.
@@ -223,7 +223,7 @@
  */
 typedef ui_cb_return_values_t (*ui_menu_listing_cb_fn)(int idx, int keypress, void* data, char* status_msg);
 
-/** Display a menu of options for the user to select from 
+/** Display a menu of options for the user to select from
  * @param title  A title to display for this menu
  * @param choices An array of strings used or the menu selection names.
  * @param descriptions An optional array of detailed descriptions for each menu item.
@@ -231,7 +231,7 @@
  *    array and, if present, the descriptions array.
  * @param msg An optional user-defined message to display at the bottom of the menu.
  *    This is intended for informational or error message from the previous action.
- * @return -1 if the user cancels the operation or an error occurs, the 0-based index into the 
+ * @return -1 if the user cancels the operation or an error occurs, the 0-based index into the
  *    choices array representing the user selection otherwise.
  */
 int ui_menu(char* title, char** choices, char** descriptions, int n_choices, char* msg);
@@ -266,7 +266,7 @@
  *    - upon user selection of a menu item.
  *    - NCURSES Mode Only: Any keypress not used for navigation or cancellation of menu.
  *    The return value of the callback will determine if the menu will continue to be displayed,
- *      a user defined status message updated, or if this menu shall exit.  
+ *      a user defined status message updated, or if this menu shall exit.
  *      See ui_menu_lsiting_cb_fn definition for details.
  * @returns Index of user selection.
  */
@@ -279,13 +279,13 @@
 
 /** ui_display_to_file
  *  Redirect subsequent ui_init() and ui_printf() output to the specified file.
- *  The file will be closed and normal behavior restored when ui_display_exec() 
+ *  The file will be closed and normal behavior restored when ui_display_exec()
  *  is called (or ui_display_to_file_close).
  * @returns AMP_OK on success, AMP_FAIL otherwise.
  */
 int ui_display_to_file(char* filename);
 
-/** This function will end the redirection of ui_printf() and close the open file (if any). 
+/** This function will end the redirection of ui_printf() and close the open file (if any).
  *    See ui_display_to_file() for details.
  */
 void ui_display_to_file_close();
@@ -317,7 +317,7 @@
 void ui_init();
 
 /** This function will reset the internal display buffer and output the specified title banner with
- *    appropriate formatting to the buffer.  The buffer will be appended to be subsequent calls to 
+ *    appropriate formatting to the buffer.  The buffer will be appended to be subsequent calls to
  *    ui_printf(), and displayed with ui_display_exec().  The display function can be suppressed
  *    in favor of file logging by calling ui_display_to_file() first.
  */
\ No newline at end of line
